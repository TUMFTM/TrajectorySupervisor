# -- GENERAL -----------------------------------------------------------------------------------------------------------

[GENERAL_SAFETY]
# enable / disable plots
use_visual=true

# set the debug level for console and log file (choose from: "DEBUG", "INFO", "WARNING", "CRITICAL")
console_log_level="WARNING"
file_log_level="INFO"
log_to_file=true

# enable / disable certain modules
# NOTE: modules can be individually enabled for the performance ('perf') and / or the emergency trajectory ('emerg')
# NOTE: Each module must be represented AT LEAST by a single component (or multiple subcomponents)
# NOTE: If multiprocessing is active and both - emergency and performance trajectory - are processed by a module, the
#       SupMod will be used for both calculations, if the module requires iterative information (e.g. uses a calculation
#       from the previous iteration, it may be usefull to set up two separate modules for each trajectory type.
# static_dummy                  dummy module
# static_collision_check        check the ego trajectory against collisions with the static environment (e.g. bounds)
# static_friction_ellipse       check if the total requested acceleration does not exceed the friction ellipse
# static_safe_end_state         check if the end of the trajectory is a safe state (e.g. velocity is zero)
# static_kinematic_dynamic      check whether the ego-trajectory respects the turn radius and machine acc. at any time
# static_rules                  check whether the ego-trajectory adheres to given rules (e.g. maximum velocity)
# static_integrity              check whether the ego-trajectory's data is valid w.r.t. physical limits or internal data
# dynamic_RSS                   check for dynamic collision risk based on the RSS framework (BETA)
# dynamic_guar_occupation       check for dynamic collision with guaranteed occupation area
# dynamic_rule_reach_sets       check for dynamic collision risk based on rule-based reachable sets
module_enabled = {"static_dummy": {"perf": false,
                                   "emerg": false},
                  "static_collision_check": {"perf": true,
                                             "emerg": true},
                  "static_friction_ellipse": {"perf": true,
                                              "emerg": true},
                  "static_safe_end_state": {"perf": false,
                                            "emerg": true},
                  "static_kinematic_dynamic": {"perf": true,
                                               "emerg": true},
                  "static_rules": {"perf": true,
                                   "emerg": true},
                  "static_integrity": {"perf": true,
                                       "emerg": true},
                  "dynamic_RSS": {"perf": false,
                                  "emerg": false},
                  "dynamic_guar_occupation": {"perf": true,
                                              "emerg": false},
                  "dynamic_rule_reach_sets": {"perf": false,
                                              "emerg": true}}

# enable / disable multiprocessing (only available on Linux, automatically disabled on Windows)
# NOTE: only use with heavy calculations due to overhead of multiprocessing queues
use_multiprocessing = false

# allowed temporal offset between trajectory and objects' time-stamp
allowed_temp_offset = 0.5

# vehicle parameters
# veh_width -     width of the ego-vehicle (also used for offline pre-calculations for other vehicles) [in m]
# veh_length -    length of the ego-vehicle (also used for offline pre-calculations for other vehicles) [in m]
# turn_rad -      turning radius of vehicle [in m]
# dyn_model_exp - exponent used in the vehicle dynamics model (usual range [1.0, 2.0])
#                 NOTE: 2.0 represents a ideal friction circle; 1.0 a perfect diamond shape
# drag_coeff -    drag coefficient incl. all constants (0.5 * c_w * A_front * rho_air), zero to disable [in m2*kg/m3]
# m_veh -         vehicle mass [in kg]
veh_params = {"veh_width": 2.8,
              "veh_length": 4.7,
              "turn_rad": 11.0,
              "dyn_model_exp": 2.0,
              "drag_coeff": 0.854,
              "m_veh": 1160.0}
