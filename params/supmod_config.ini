#-- GENERAL ------------------------------------------------------------------------------------------------------------
[GENERAL]
# expected maximal calculation time for assessment of all provided trajectories in one iteration [in s]
# a warning is printed and logged, if an iteration takes more time to finish
t_warn = 0.1

# ----------------------------------------------------------------------------------------------------------------------
# -- STATIC ENVIRONMENT ------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

[STATIC_COLLISION]
# enable / disable plots
# remark: please use only this writing style for flags: true or false (no upper case)
# if using the occ. map for track adherance checks, this flag supports debugging (only collisions are plotted)
plot_occupancy = false

# specify between minimal safety (catching most of the issues) and absolute safety (catching all issues)
# linear scaling between:
#   * 0.0 (tube of trajectory with vehicle witdh is used for static collision checks)
#   * 1.0 (tube of trajectory with half of vehicle diagonal witdh is used for static collision checks)
safety_factor = 0.0

[FRICTION]
# allowed percentage of acceleration usage defined in localgg, e.g.:
# * 1.0: vehicle can request full acceleration spectrum specified in the localgg
# * 1.2: vehicle can request 20% more acceleration than specified in the localgg
allowed_acc=1.15

[RULES]
# overall maximum velocity set by race control / event [in m/s]
v_max = 84.0

# maximum deceleration allowed (detached from phsical feasibility) by race control / event [in m/s2]
a_max_dec = -35.0

[KINEMATIC_DYNAMIC]
# flag enabling / disabling motor acceleration limits
enable_motor_limits = true

# allowed percentage of motor acceleration usage defined in ax_max_machines, e.g.:
# * 1.0: vehicle can request full acceleration spectrum specified in the ax_max_machines
# * 1.2: vehicle can request 20% more acceleration than specified in the ax_max_machines
allowed_acc = 1.15

[INTEGRITY]
# -- basic checks --
# allowed maximum distance between coordinate points (default: no jumps larger than 30.0m between coordinates assumed)
s_max = 30.0

# allowed heading interval (default: values within range [-2pi, 2pi]
head_int = [-6.30, 6.30]

# allowed curvature interval (default: [-1.0, 1.0] - no turns <1.0m assumed)
curv_int = [-1.0, 1.0]

# allowed velocity interval (default: [-1.0, 100.0] - no negative velocities and no velocity above 100m/s assumed)
vel_int = [-1.0, 100.0]

# allowed acceleration interval (default: [-50.0, 50.0] - no absolute acceleration above 50.0m/s2 assumed)
acc_int = [-50.0, 50.0]

# -- s-coordinate check --
# maximum relative derivation from reference value calculated via straights connecting coordinates [1.0 beeing 100%]
s_err = 0.1

# -- heading check --
# maximum absoule angle derivation for heading approximation via coordinates (caution, estimated via 3 points) [in rad]
head_err = 0.5

# -- curvature check --
# maximum absolute derivation from reference value calculated via coordinates (estimated via 3 points) [in 1/m]
# Note: with an absolute value, the focus is on accuracy of sharp turns with higher curvature values
curv_err = 0.05

# -- acceleration check --
# maxcimum absolute derivation form reference value calculated via velocity and s-coord [in m/s2]
ax_err = 0.2

# ----------------------------------------------------------------------------------------------------------------------
# -- DYNAMIC ENVIRONMENT -----------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

[RSS]
# response times
# time of react [s] (based on the update cycle of the SW-stack)
t_react = 0.2

# temporal debounce [s] (time period, the generated safety output must be constantly active)
t_debounce = 0.0

# use a spline containing past points to estimate the current curvature of the object vehicles (experimental for now!)
flag_curv = false

[GUAR_OCCUPATION]
# time-horizon the guarranteed occupation set is computed for [in s]
t_max = 2.0

# temporal step-size in rendered occupation set [in s]
dt = 0.1

# maximum velocity of objects to be rendered in occupation set [in m/s]
v_max = 80.0

# velocity step-size in rendered occupation set [in m/s]
d_v = 1.0

# number of states to be computed in each quadrant for the reachable set, used to derive the guaranteed occupation set
nmb_states = 101

[RULE_REACH_SET]
# time-horizon the reachable set is computed for [in s]
t_max = 3.0

# temporal step-size in rendered reachable set [in s]
dt = 0.2

# used method to calculate the reachable set, currently the following options are implemented
# - "simple":       reachable set based based on althoffs over-approx.
# - "turn":         same as simple, but limited by turn radius to left / right from current position
# - "bound":        same as simple, but considering steering trajectory ensuring not to collide with walls (BETA)
reachset_method = turn

# flag indicating whether the reachable set should be timmed to the track bounds (otherwise overlapping the bounds)
reachset_trim_to_bound = true

# rules to be considered
rules_enabled = {"roborace_alpha": true,
                 "f1": true}

# -- RULE SPECIFIC PARAMETERS ------------------------------------------------------------------------------------------
# -- roborace_alpha ----------------------------------------------------------------------------------------------------
# trigger distance Roborace rules in s
t_trigger_roborace = 7.0

# -- F1 ----------------------------------------------------------------------------------------------------------------
# Alongside rule parameters ("3." in https://f1metrics.wordpress.com/2014/08/28/the-rules-of-racing/)
# - d_overlap:        percentage of required vehicle overlap to trigger alongside rule, in [0.0, 1.0]
# - len_patch:        minimum length (along s-coordinate) of path to be removed [in m]
# - width_extra_bound:absolute width, that is overlapped with the bound (in order to avoid fractioned reach-sets) [in m]
#                     NOTE: must be large, if reach-sets are not clipped to bounds, but this can lead to
#                           self-intersections in turns
alongside_parameters = {"d_overlap": 0.2,
                        "len_patch": 100.0,
                        "width_extra_bound": 1.0}

# Defense off-line rule parameters (ยง2b in Appendix L to the sporting code)
# - d_corner:         distance infront of corner to be rated as "approaching corner" [in m]
# - d_defend:         distance between two vehicles, which counts as defending if fallen short of [in m]
# - kappa_thr:        curvature threshold used to differentiate between straight and corner segments
# - len_patch:        minimum length (along s-coordinate) of path to be removed [in m]
# - width_extra_bound:absolute width, that is overlapped with the bound (in order to avoid fractioned reach-sets) [in m]
#                     NOTE: must be large, if reach-sets are not clipped to bounds, but this can lead to
#                           self-intersections in turns
# - veh_widht_factor: multiplication factor for the vehicle width to be inflated
defense_parameters = {"d_corner": 150.0,
                      "d_defend": 30.0,
                      "kappa_thr": 0.01,
                      "len_patch": 100.0,
                      "width_extra_bound": 1.0,
                      "veh_width_factor": 1.1}
